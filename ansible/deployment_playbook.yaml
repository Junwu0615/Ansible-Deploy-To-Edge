---
- name: 模擬部署 - 使用 Ansible 將指定服務一鍵下發到所有邊緣裝置
#  hosts: wsl_hosts
  hosts: device_configs
  become: false
  gather_facts: false

  tasks:
    # ----------------------------------------------------
    - name: 1. 確認裝置資訊
      debug:
        msg: "Deploying to {{ inventory_hostname }} with DEVICE_ID={{ DEVICE_ID }}, PORT={{ DEPLOY_PORT }}"

    # ----------------------------------------------------
    - name: 2. 拉取映像檔
      docker_image:
        name: "{{ REGISTRY_HOST_PORT }}/pc-hello-world:latest"
        source: pull

    # ----------------------------------------------------
#    - name: 3. 啟動容器 (docker-compose up) # 舊版，未使用模板 # docker-compose 無法用 jinja2 模板化
#      command: docker-compose -p "{{ DEVICE_ID | lower }}" -f "{{ playbook_dir }}/../docker/script/docker-compose.yaml" up -d

    # ----------------------------------------------------
    - name: 3.0. 複製 .env 檔案到 /tmp/
      copy:
        src: "{{ playbook_dir }}/templates/.env"
        dest: "/tmp/.env"
        mode: '0644'

    - name: 3.1. 渲染 docker-compose 檔案
      template:
        src: "{{ playbook_dir }}/templates/docker-compose.yaml.j2"
        # 儲存為一個新的純 YAML 檔案，這樣 docker-compose 才能讀取
        dest: "/tmp/docker-compose-{{ DEVICE_ID | lower }}.yaml"

    # ----------------------------------------------------
    - name: 3.2. 啟動容器 ( docker-compose up )
      command: docker-compose -p "{{ DEVICE_ID | lower }}" -f "/tmp/docker-compose-{{ DEVICE_ID | lower }}.yaml" up -d

    # ----------------------------------------------------
    - name: 4. 驗證容器狀態
      command: docker ps
      register: docker_ps
      changed_when: false

    - debug:
        var: docker_ps.stdout